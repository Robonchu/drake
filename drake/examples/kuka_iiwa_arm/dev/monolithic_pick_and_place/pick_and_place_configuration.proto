syntax = "proto3";

package drake.examples.kuka_iiwa_arm.monolithic_pick_and_place.proto;

// Next ID: 7
message Pose {
    // Position
    double x = 1;
    double y = 2;
    double z = 3;
    // Orientation in SpaceXYZ Euler angles
    double roll = 4;
    double pitch = 5;
    double yaw = 6;
}

// Next ID: 3
message Frame {
    // Name of the body relative to which the frame is defined.
    string body = 1;
    // Relative pose of the frame.
    Pose X_BF = 2;
}

// Next ID: 4
message Model {
    // The name of the model. Names should be unique.
    string name = 1;
    // The path to the URDF/SDF file that defines the model.
    string path = 2;
    // The frame to which the model is attached.
    Frame weld_to_frame = 3;
}

// Next ID: 4
message Box {
    // Dimensions of the box
    double size_x = 1;
    double size_y = 2;
    double size_z = 3;
}

// Next ID: 3
message Cylinder {
    // Dimensions of the cylinder
    double length = 1;
    double radius = 2;
}

// Next ID: 6
message PlannerConfiguration {
    // The name of the robot arm that picks and places.
    string robot_name = 1;

    // The path to a URDF file describing the robot arm that picks and places.
    string robot_path = 2;

    // The grasp frame of the end effector.
    Frame grasp_frame = 3;

    // PickableObject a free-floating object for planning purposes.
    // Next ID: 3
    message PickableObject {
        // The name of the object.
        string name = 1;
        // Axis-aligned bounding box centered at the object's origin.
        Box aabb = 2;
    }
    // The object to be picked and placed. The name of 
    PickableObject target = 4;

    // Table represents a table for planning purposes.
    // Next ID: 4 
    message Table {
        // The name of the table. Names should be unique.
        string name = 1;
        oneof geometry {
            Box box = 2;
            Cylinder cylinder = 3;
        }
    }
    // The tables from/on which the target can be picked/placed.
    repeated Table table = 5;
}

// Next ID: 3
message SimulatorConfiguration {
    // The world-fixed models in the scene.
    repeated Model fixed_model = 1;
    // The floating models in the scene.
    repeated Model floating_model = 2;
}

// Next ID: 2
message  OptitrackConfiguration{
    // OptitrackConfiguration.RigidBody represents a rigid body as seen by Optitrack
    // Map between object names and Optitrack's rigid body ids.
    map<string, int32> optitrack_id = 1;
}

